diff --git a/node_modules/strapi-plugin-navigation/server/i18n/navigationSetupStrategy.js b/node_modules/strapi-plugin-navigation/server/i18n/navigationSetupStrategy.js
index c8139f6..5d287ca 100644
--- a/node_modules/strapi-plugin-navigation/server/i18n/navigationSetupStrategy.js
+++ b/node_modules/strapi-plugin-navigation/server/i18n/navigationSetupStrategy.js
@@ -25,47 +25,94 @@ const i18nNavigationSetupStrategy = async ({ strapi, }) => {
             ];
         }
         if (currentNavigations.some(hasNotAnyLocale)) {
-            currentNavigations = await Promise.all(currentNavigations.map(async (navigation) => {
-                return hasNotAnyLocale(navigation)
-                    ? await updateNavigation({
-                        strapi,
-                        current: navigation,
-                        payload: {
-                            localeCode: defaultLocale,
-                        },
-                        populate: utils_1.DEFAULT_POPULATE,
-                    })
-                    : navigation;
-            }));
-        }
-        await Promise.all(currentNavigations
-            .filter(({ localeCode }) => defaultLocale === localeCode)
-            .flatMap(async (rootNavigation) => {
-            const localizations = [
-                ...(rootNavigation.localizations ?? []).map((localization) => (0, types_1.assertEntity)(localization, "Navigation")),
-                rootNavigation,
-            ];
-            for (const locale of allLocale) {
-                if (!localizations.some(({ localeCode }) => localeCode === locale)) {
-                    localizations.push(await createNavigation({
-                        strapi,
-                        payload: {
-                            localeCode: locale,
-                            slug: `${rootNavigation.slug}-${locale}`,
-                            name: rootNavigation.name,
-                            visible: true,
-                        },
-                    }));
-                }
+            const navs = [];
+            for (const navigation of currentNavigations){
+              navs.push(hasNotAnyLocale(navigation)
+                ? await updateNavigation({
+                  strapi,
+                  current: navigation,
+                  payload: {
+                    localeCode: defaultLocale,
+                  },
+                  populate: utils_1.DEFAULT_POPULATE,
+                })
+                : navigation);
             }
-            return await Promise.all(localizations.map((current) => updateNavigation({
+            currentNavigations = navs;
+            // currentNavigations = await Promise.all(currentNavigations.map(async (navigation) => {
+            //     return hasNotAnyLocale(navigation)
+            //         ? await updateNavigation({
+            //             strapi,
+            //             current: navigation,
+            //             payload: {
+            //                 localeCode: defaultLocale,
+            //             },
+            //             populate: utils_1.DEFAULT_POPULATE,
+            //         })
+            //         : navigation;
+            // }));
+        }
+        const cnavs = [];
+        const temps = currentNavigations
+          .filter(({ localeCode }) => defaultLocale === localeCode);
+        for (const rootNavigation of temps){
+          const localizations = [
+            ...(rootNavigation.localizations ?? []).map((localization) => (0, types_1.assertEntity)(localization, "Navigation")),
+            rootNavigation,
+          ];
+          for (const locale of allLocale) {
+            if (!localizations.some(({ localeCode }) => localeCode === locale)) {
+              localizations.push(await createNavigation({
                 strapi,
-                current,
                 payload: {
-                    localizations: localizations.filter(({ id }) => id !== current.id),
+                  localeCode: locale,
+                  slug: `${rootNavigation.slug}-${locale}`,
+                  name: rootNavigation.name,
+                  visible: true,
                 },
-            })));
-        }));
+              }));
+            }
+          }
+
+          for(const current of localizations){
+            await updateNavigation({
+              strapi,
+              current,
+              payload: {
+                localizations: localizations.filter(({ id }) => id !== current.id),
+              },
+            })
+          }
+        }
+
+        // await Promise.all(currentNavigations
+        //     .filter(({ localeCode }) => defaultLocale === localeCode)
+        //     .flatMap(async (rootNavigation) => {
+        //     const localizations = [
+        //         ...(rootNavigation.localizations ?? []).map((localization) => (0, types_1.assertEntity)(localization, "Navigation")),
+        //         rootNavigation,
+        //     ];
+        //     for (const locale of allLocale) {
+        //         if (!localizations.some(({ localeCode }) => localeCode === locale)) {
+        //             localizations.push(await createNavigation({
+        //                 strapi,
+        //                 payload: {
+        //                     localeCode: locale,
+        //                     slug: `${rootNavigation.slug}-${locale}`,
+        //                     name: rootNavigation.name,
+        //                     visible: true,
+        //                 },
+        //             }));
+        //         }
+        //     }
+        //     return await Promise.all(localizations.map((current) => updateNavigation({
+        //         strapi,
+        //         current,
+        //         payload: {
+        //             localizations: localizations.filter(({ id }) => id !== current.id),
+        //         },
+        //     })));
+        // }));
     }
     else {
         if (config.pruneObsoleteI18nNavigations) {
